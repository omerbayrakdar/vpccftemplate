" AWSTemlateFormationVersion": "2010-09-09"

This template is for the AWS formation Version template. we are telling referens to to this instance.
Inside double quotas version date 
next line is

" Description":  (this is optional)
"This template is for VPC"

We put the "Parameters":


PARAMETERS BLOCK

"Parameters": {


(You go to AWS and grab the format. When you grab something from AWS we put it in the parameter block. 
Parameters makes in able to input custom values each time we create or update a stack. )
Why do we need parameters?
Instant Type Parameters: 

"KeyName": {

( We are not creating a key name each time we spin up an EC2 instance.  We use Key name because whatever we SSH to the instance  and we don’t have to create a new key each time, we can use the previous key.pem to spin the instance. AWS console we go to the key pairs, one key is created, we use the same key for multipleinstances. That’s what we put this command inside the “Parameters” block.

"Type": "AWS::EC2::KeyPair::KeyName"

We are putting the type of what kind of parameter we are going to use. Description is enough.  Once we start automating, it will grab the keynote dynamically. Because automation will take care of the rest of it. Here we are taking the existing pem file. (Key pair) 
 
"LatestAmiId": {

(Block of the code has its own Logical id. Logical blocks don’t have  the staticname) 

We are referencing the instance that we create. Whenever we spin up the EC2 instance, first we do pick it from the console. 

Amazon Image Id (AMI) each image has an ID, this image id will get changed in the future, AMI id may not be  the same and instance will not work in the future., because it will not find the right image. Image ID doesn’t exist. We are adding this to the parameters block to basically grab the AMI id dynamically. 


"Type": "AWS::SSM:Parameter::Value<AWS::EC2::Image::Id>",


AWS console, SSM, is a parameter store of AWS, we take from there. We use ‘double column’ :: between two values. We are building dynamically.

"Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

We are mentioning that What default value we are going to use. We are getting the latest one that’s why we are putting a path to AWS.
The path is /service/ami type/ and what kind of architect we are going to use, we mention here too. x86_64 and gp2 (general purpose ) 

"Resources": {

We are starting to create our “Resources” block. We need to create our VPC here. Under the resource block. Then later we will configure it. 

"vpc1": {

Our logical ID is vpc1 for this block

"Type": "AWS::EC2::VPC",

We need to mention which path is our type, Aws console::Ec2 service and under EC2 we are creating the vpc. Whenever we run automation code, we basically tell the machine that comes to this console, go to AWS, then come to EC2 and come to VPC and click on it. 


"Properties": {

After creating the VPC, there will be some properties, what kind of properties we need to create, we can do line by line. 

"CidrBlock": "10.10.0.0/16",

Creating the VPC and giving the name, later VPC has a CIDR Block. 


"EnableDnsHostnames" : true,

DNS can use the hostnames whenever we are gonna use Route53, and others. 

Boolean Means true or false value. Besides true or false if you pass anything it is not gonna work, boolean accepts only true or false values. 


"EnableDnsSupport" : true,


When we click to the VPC and right upper corner of the screen, there is an “Action” button,
Once we click it there it shows us our vpc action, edit Cidr, edit DNS hostname, edit DNS resolution, manage tags and delete vpc. 


"InstanceTenancy" : "default",


Whenever we use the VPC we use some part of the hardware, even though our VPC is a private environment, we share the hardware with other companies.
Default: VPC has private access but we share hardware with other companies
Dedicated: We only rent the dedicated hardware, AWS provides us dedicated hardware, but it is more expensive than Default tenancy.  String always inside the double quote, 
Instance tenancy there are two options: Default or Dedicated. Manually at the console there is a “Tenancy’ default 


"Tags": [ {"Key": "Name", "Value": "vpc1"} 

The name is, we give this name to this vpc. So in this automation our vpc name we called ‘vpc1’
We start with arrain [ ] and inside the arrain we add curly braces { } then double quotes “ “ Key `` is''Name `` comma. The value is vpc1.



vpc2 : we can create another vpc to make it for different departments in the company, it gives more isolation area inside the company's cloud solutions. In order to add a new vpc, automation make is easy for us, we an copy and paste the first vpc and need to change the values, which is vpc name, (vpc2) cidr block number) 

We can create two vpc’s with same cidr block, that will work, but in the future once we do vpc peering and our cidr will be overlap  


We creating a new logical id for subnets

"vpc1snA1": {

We need to create dynamic subnets (AZ’s) under the VPC. The goal is whenever we create a subnet, we don’t have to go to the AWS console and click to the subnet button, to create hard code Az names (us-east 1a, us-west 1c etc. ) we can automate it here. 
The ultimate goal is building a modular code to be able to deploy all the environments and all the regions. 


"Type": "AWS::EC2::Subnet",

This is our subnet path our automation codes will go and grab from AWS console:: go to the EC2  service and under EC2  we want to create our subnet. 


"Properties": {

After creating the Subnet, there will be some properties, what kind of properties we need to create, we can do line by line. 

"VpcId": {"Ref": "vpc1"},

Whenever we create the subnet, we need to specify which vpc that our subnet will reside. In this case we refer our subnet to vpc id which is ‘vpc1”. The “Ref’ is basically referring to Vpc1 because vpc1 is  holding the same values.  logical id’s value. Logical id is unique and holds unique values. So whenever we referens we always referens to vpc id. (logical id) 


"Tags": [ {"Key": "Name", "Value": "vpc1_subnet_public"} ],

Tags section, we start with arran [ ] 
Value is we can type a custom name, as vpc1 ( our vpc name) subnet and we can differentiate as public or private. In this block we used a public subnet. 


"MapPublicIpOnLaunch" : true,

Since this subnet is a public subnet, when we create a subnet manually, we click to the subnet and upper side of the page there is an “action’ button, once we click it there is a section called “ Modify auto-assign IP settings” in that section 
Subnet ID:
Auto assign IPv4: enable auto

"AvailabilityZone" : {

When we create a Subnet it must be inside of an Availability zone. If we put any available zone by doing manually,  (ex: “us-east1-a) and when we put a specific value of us-east1-a and we go to different regions it is going to fail. It can not find this value. So that's why the available zone needs to be function built. 

"Fn::Select": [

Fn stands for  Function, Cloudformation has a built in function, effect is selected, there will be a list that we need to pass. Select means come to drop down and select for me. 

"0",

Index in object programming languages the number of the index is zero “0” 

 "Fn::GetAZs": ""


We select the first value ( which is zero ‘0’) and we need to specify the Az’s for us. And “ “ empty list we put that means go and get all the AZ’s. we are creating the empty list and we are  appemping there. 
                
 "CidrBlock": "10.10.1.0/24"


Creating the 2nd Subnet


"vpc1snA2": {

We need to create a second dynamic subnet (AZ’s) under the VPC. 

"Type": "AWS::EC2::Subnet",

This is our subnet path our automation codes will go and grab from AWS console:: go to the EC2  service and under EC2  we want to create our subnet. 


"Properties": {

After creating the Subnet, there will be some properties, what kind of properties we need to create, we can do line by line. 

"VpcId": {"Ref": "vpc1"},

Whenever we create the subnet, we need to specify which vpc that our subnet will reside. In this case we refer our subnet to vpc id which is ‘vpc1”. The “Ref’ is basically referring to Vpc1 because vpc1 is  holding the same values.  logical id’s value. Logical id is unique and holds unique values. So whenever we referens we always referens to vpc id. (logical id) 


"Tags": [ {"Key": "Name", "Value": "vpc1_subnet_private"} ],

Tags section, we start with array [ ] 
Value is we can type a custom name, as vpc1 ( our vpc name) subnet and we can differentiate as public or private. In this block we used a private subnet. 


"MapPublicIpOnLaunch" : false,

Our first subnet was  a public subnet, but this time we automating to create a private subnet, when we create a subnet manually, we click to the subnet and upper side of the page there is an “action’ button, once we click it there is a section called “ Modify auto-assign IP settings” in that section 
Subnet ID:
Auto assign IPv4: enable auto (private subnet this auto assign needs to be disable) 

"AvailabilityZone" : {

When we create a Subnet it must be inside of an Availability zone. If we put any available zone by doing manually,  (ex: “us-east1-a) and when we put a specific value of us-east1-a and we go to different regions it is going to fail. It can not find this value. So that's why the available zone needs to be function built. 

"Fn::Select": [

Fn stands for  Function, Cloudformation has a built in function, effect is selected, there will be a list that we need to pass. Select means come to drop down and select for me. 

"0",

Index in object programming languages the number of the index is zero “0” 

 "Fn::GetAZs": ""

We select the first value ( which is zero ‘0’) and we need to specify the Az’s for us. And “ “ empty list we put that means go and get all the AZ’s. we are creating the empty list and we are  appemping there. 
                
 "CidrBlock": "10.10.2.0/24"

In this subnet cidr block we give a different number from the subnet than the one. 

"igwvpc1": {

We need to create an Internet gateway. We can give a specific logical id name. In this case we give ‘igwvpc1’ a logical id name.  


"Type": "AWS::EC2::InternetGateway",

We always creating a resource, and mentioning here 
WHAT TYPE OF THE RESOURCE THAT WE ARE GOING TO USE 
We are going to AWS console and tell which type we are using, EC2 services than inside EC2 service we use Internet gateway.  


 "DependsOn": "vpc1",

Whenever we create an Internet gateway, where do we attach it manually? To the Vpc, in this automation we need to mention which vpc that we create first. We are specifying which logical id we need to attach. Our vpc logical  id is “vpc1’


 "Properties": {

We are automating our properties for this vpc here. 



"Tags": [ { "Key": "Name", "Value": "vpc1igw"} ]


When we create an internet gateway at AWS console, we click to create an internet gateway (IG) , and from there. We put our custom name on the IG. in this case we gave ‘vpc1igw’.  It comes with a detached mood. We need to attach to our VPC 
        
"igwattachmentvpc1": {

We created a new logical id. For attaching our IG to the vpc, we have a name of ‘igwattachmentvpc1’ logical id. 

"Type": "AWS::EC2::VPCGatewayAttachment",

In this section we are attaching the internet gateway to vpc. Automating the codes that go to AWS console and from there we use EC2 service and in this service we are attaching our IG to our Vpc. 

"Properties": {


"InternetGatewayId": {"Ref": "igwvpc1"},

We also referring which internet gateway id, here we type our logical id name of igwvpc1

"VpcId": {"Ref": "vpc1"}

In this case we are referring our vpcId to vpc1 logical id.  










